[1mdiff --git a/.env b/.env[m
[1mdeleted file mode 100644[m
[1mindex a7551d4..0000000[m
[1m--- a/.env[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-VITE_SUPABASE_URL=https://gvijhiueitaujezwsdut.supabase.co[m
[31m-VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2aWpoaXVlaXRhdWplendzZHV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY4MDE3NjEsImV4cCI6MjA3MjM3Nzc2MX0.x3ScEnQlt5pmQn9qE9Tw7qTSDeyvJkOa3nQAn7beaIs[m
[31m-VITE_OPENAI_API_KEY=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[m
[1mdiff --git a/et --soft HEAD~1 b/et --soft HEAD~1[m
[1mnew file mode 100644[m
[1mindex 0000000..a684999[m
[1m--- /dev/null[m
[1m+++ b/et --soft HEAD~1[m	
[36m@@ -0,0 +1 @@[m
[32m+[m[32m[33m7ccffa9[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m ðŸŽ£ Major FishApp Updates: Simplified onboarding, species image mapping, and PWA features[m
[1mdiff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json[m
[1mindex abb5923..bd1f41a 100644[m
[1m--- a/node_modules/.package-lock.json[m
[1m+++ b/node_modules/.package-lock.json[m
[36m@@ -333,6 +333,15 @@[m
         "node": ">=6.9.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/@emailjs/browser": {[m
[32m+[m[32m      "version": "4.4.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@emailjs/browser/-/browser-4.4.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-DGSlP9sPvyFba3to2A50kDtZ+pXVp/0rhmqs2LmbMS3I5J8FSOgLwzY2Xb4qfKlOVHh29EAutLYwe5yuEZmEFg==",[m
[32m+[m[32m      "license": "BSD-3-Clause",[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">=14.0.0"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/@esbuild/win32-x64": {[m
       "version": "0.21.5",[m
       "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",[m
[36m@@ -1581,6 +1590,18 @@[m
         "node": ">=6.0.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/dotenv": {[m
[32m+[m[32m      "version": "17.2.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-kQhDYKZecqnM0fCnzI5eIv5L4cAe/iRI+HqMbO/hbRdTAeXDG+M9FjipUxNfbARuEg4iHIbhnhs78BCHNbSxEQ==",[m
[32m+[m[32m      "license": "BSD-2-Clause",[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">=12"[m
[32m+[m[32m      },[m
[32m+[m[32m      "funding": {[m
[32m+[m[32m        "url": "https://dotenvx.com"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/eastasianwidth": {[m
       "version": "0.2.0",[m
       "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",[m
[1mdiff --git a/node_modules/.vite/deps/@emailjs_browser.js b/node_modules/.vite/deps/@emailjs_browser.js[m
[1mnew file mode 100644[m
[1mindex 0000000..bf97595[m
[1m--- /dev/null[m
[1m+++ b/node_modules/.vite/deps/@emailjs_browser.js[m
[36m@@ -0,0 +1,252 @@[m
[32m+[m[32mimport "./chunk-V4OQ3NZ2.js";[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js[m
[32m+[m[32mvar EmailJSResponseStatus = class {[m
[32m+[m[32m  constructor(_status = 0, _text = "Network Error") {[m
[32m+[m[32m    this.status = _status;[m
[32m+[m[32m    this.text = _text;[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js[m
[32m+[m[32mvar createWebStorage = () => {[m
[32m+[m[32m  if (typeof localStorage === "undefined")[m
[32m+[m[32m    return;[m
[32m+[m[32m  return {[m
[32m+[m[32m    get: (key) => Promise.resolve(localStorage.getItem(key)),[m
[32m+[m[32m    set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),[m
[32m+[m[32m    remove: (key) => Promise.resolve(localStorage.removeItem(key))[m
[32m+[m[32m  };[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/store/store.js[m
[32m+[m[32mvar store = {[m
[32m+[m[32m  origin: "https://api.emailjs.com",[m
[32m+[m[32m  blockHeadless: false,[m
[32m+[m[32m  storageProvider: createWebStorage()[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js[m
[32m+[m[32mvar buildOptions = (options) => {[m
[32m+[m[32m  if (!options)[m
[32m+[m[32m    return {};[m
[32m+[m[32m  if (typeof options === "string") {[m
[32m+[m[32m    return {[m
[32m+[m[32m      publicKey: options[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[32m  if (options.toString() === "[object Object]") {[m
[32m+[m[32m    return options;[m
[32m+[m[32m  }[m
[32m+[m[32m  return {};[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/methods/init/init.js[m
[32m+[m[32mvar init = (options, origin = "https://api.emailjs.com") => {[m
[32m+[m[32m  if (!options)[m
[32m+[m[32m    return;[m
[32m+[m[32m  const opts = buildOptions(options);[m
[32m+[m[32m  store.publicKey = opts.publicKey;[m
[32m+[m[32m  store.blockHeadless = opts.blockHeadless;[m
[32m+[m[32m  store.storageProvider = opts.storageProvider;[m
[32m+[m[32m  store.blockList = opts.blockList;[m
[32m+[m[32m  store.limitRate = opts.limitRate;[m
[32m+[m[32m  store.origin = opts.origin || origin;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/api/sendPost.js[m
[32m+[m[32mvar sendPost = async (url, data, headers = {}) => {[m
[32m+[m[32m  const response = await fetch(store.origin + url, {[m
[32m+[m[32m    method: "POST",[m
[32m+[m[32m    headers,[m
[32m+[m[32m    body: data[m
[32m+[m[32m  });[m
[32m+[m[32m  const message = await response.text();[m
[32m+[m[32m  const responseStatus = new EmailJSResponseStatus(response.status, message);[m
[32m+[m[32m  if (response.ok) {[m
[32m+[m[32m    return responseStatus;[m
[32m+[m[32m  }[m
[32m+[m[32m  throw responseStatus;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js[m
[32m+[m[32mvar validateParams = (publicKey, serviceID, templateID) => {[m
[32m+[m[32m  if (!publicKey || typeof publicKey !== "string") {[m
[32m+[m[32m    throw "The public key is required. Visit https://dashboard.emailjs.com/admin/account";[m
[32m+[m[32m  }[m
[32m+[m[32m  if (!serviceID || typeof serviceID !== "string") {[m
[32m+[m[32m    throw "The service ID is required. Visit https://dashboard.emailjs.com/admin";[m
[32m+[m[32m  }[m
[32m+[m[32m  if (!templateID || typeof templateID !== "string") {[m
[32m+[m[32m    throw "The template ID is required. Visit https://dashboard.emailjs.com/admin/templates";[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js[m
[32m+[m[32mvar validateTemplateParams = (templateParams) => {[m
[32m+[m[32m  if (templateParams && templateParams.toString() !== "[object Object]") {[m
[32m+[m[32m    throw "The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/";[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js[m
[32m+[m[32mvar isHeadless = (navigator2) => {[m
[32m+[m[32m  return navigator2.webdriver || !navigator2.languages || navigator2.languages.length === 0;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js[m
[32m+[m[32mvar headlessError = () => {[m
[32m+[m[32m  return new EmailJSResponseStatus(451, "Unavailable For Headless Browser");[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js[m
[32m+[m[32mvar validateBlockListParams = (list, watchVariable) => {[m
[32m+[m[32m  if (!Array.isArray(list)) {[m
[32m+[m[32m    throw "The BlockList list has to be an array";[m
[32m+[m[32m  }[m
[32m+[m[32m  if (typeof watchVariable !== "string") {[m
[32m+[m[32m    throw "The BlockList watchVariable has to be a string";[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js[m
[32m+[m[32mvar isBlockListDisabled = (options) => {[m
[32m+[m[32m  var _a;[m
[32m+[m[32m  return !((_a = options.list) == null ? void 0 : _a.length) || !options.watchVariable;[m
[32m+[m[32m};[m
[32m+[m[32mvar getValue = (data, name) => {[m
[32m+[m[32m  return data instanceof FormData ? data.get(name) : data[name];[m
[32m+[m[32m};[m
[32m+[m[32mvar isBlockedValueInParams = (options, params) => {[m
[32m+[m[32m  if (isBlockListDisabled(options))[m
[32m+[m[32m    return false;[m
[32m+[m[32m  validateBlockListParams(options.list, options.watchVariable);[m
[32m+[m[32m  const value = getValue(params, options.watchVariable);[m
[32m+[m[32m  if (typeof value !== "string")[m
[32m+[m[32m    return false;[m
[32m+[m[32m  return options.list.includes(value);[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js[m
[32m+[m[32mvar blockedEmailError = () => {[m
[32m+[m[32m  return new EmailJSResponseStatus(403, "Forbidden");[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js[m
[32m+[m[32mvar validateLimitRateParams = (throttle, id) => {[m
[32m+[m[32m  if (typeof throttle !== "number" || throttle < 0) {[m
[32m+[m[32m    throw "The LimitRate throttle has to be a positive number";[m
[32m+[m[32m  }[m
[32m+[m[32m  if (id && typeof id !== "string") {[m
[32m+[m[32m    throw "The LimitRate ID has to be a non-empty string";[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js[m
[32m+[m[32mvar getLeftTime = async (id, throttle, storage) => {[m
[32m+[m[32m  const lastTime = Number(await storage.get(id) || 0);[m
[32m+[m[32m  return throttle - Date.now() + lastTime;[m
[32m+[m[32m};[m
[32m+[m[32mvar isLimitRateHit = async (defaultID, options, storage) => {[m
[32m+[m[32m  if (!options.throttle || !storage) {[m
[32m+[m[32m    return false;[m
[32m+[m[32m  }[m
[32m+[m[32m  validateLimitRateParams(options.throttle, options.id);[m
[32m+[m[32m  const id = options.id || defaultID;[m
[32m+[m[32m  const leftTime = await getLeftTime(id, options.throttle, storage);[m
[32m+[m[32m  if (leftTime > 0) {[m
[32m+[m[32m    return true;[m
[32m+[m[32m  }[m
[32m+[m[32m  await storage.set(id, Date.now().toString());[m
[32m+[m[32m  return false;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js[m
[32m+[m[32mvar limitRateError = () => {[m
[32m+[m[32m  return new EmailJSResponseStatus(429, "Too Many Requests");[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/methods/send/send.js[m
[32m+[m[32mvar send = async (serviceID, templateID, templateParams, options) => {[m
[32m+[m[32m  const opts = buildOptions(options);[m
[32m+[m[32m  const publicKey = opts.publicKey || store.publicKey;[m
[32m+[m[32m  const blockHeadless = opts.blockHeadless || store.blockHeadless;[m
[32m+[m[32m  const storageProvider = opts.storageProvider || store.storageProvider;[m
[32m+[m[32m  const blockList = { ...store.blockList, ...opts.blockList };[m
[32m+[m[32m  const limitRate = { ...store.limitRate, ...opts.limitRate };[m
[32m+[m[32m  if (blockHeadless && isHeadless(navigator)) {[m
[32m+[m[32m    return Promise.reject(headlessError());[m
[32m+[m[32m  }[m
[32m+[m[32m  validateParams(publicKey, serviceID, templateID);[m
[32m+[m[32m  validateTemplateParams(templateParams);[m
[32m+[m[32m  if (templateParams && isBlockedValueInParams(blockList, templateParams)) {[m
[32m+[m[32m    return Promise.reject(blockedEmailError());[m
[32m+[m[32m  }[m
[32m+[m[32m  if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {[m
[32m+[m[32m    return Promise.reject(limitRateError());[m
[32m+[m[32m  }[m
[32m+[m[32m  const params = {[m
[32m+[m[32m    lib_version: "4.4.1",[m
[32m+[m[32m    user_id: publicKey,[m
[32m+[m[32m    service_id: serviceID,[m
[32m+[m[32m    template_id: templateID,[m
[32m+[m[32m    template_params: templateParams[m
[32m+[m[32m  };[m
[32m+[m[32m  return sendPost("/api/v1.0/email/send", JSON.stringify(params), {[m
[32m+[m[32m    "Content-type": "application/json"[m
[32m+[m[32m  });[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js[m
[32m+[m[32mvar validateForm = (form) => {[m
[32m+[m[32m  if (!form || form.nodeName !== "FORM") {[m
[32m+[m[32m    throw "The 3rd parameter is expected to be the HTML form element or the style selector of the form";[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js[m
[32m+[m[32mvar findHTMLForm = (form) => {[m
[32m+[m[32m  return typeof form === "string" ? document.querySelector(form) : form;[m
[32m+[m[32m};[m
[32m+[m[32mvar sendForm = async (serviceID, templateID, form, options) => {[m
[32m+[m[32m  const opts = buildOptions(options);[m
[32m+[m[32m  const publicKey = opts.publicKey || store.publicKey;[m
[32m+[m[32m  const blockHeadless = opts.blockHeadless || store.blockHeadless;[m
[32m+[m[32m  const storageProvider = store.storageProvider || opts.storageProvider;[m
[32m+[m[32m  const blockList = { ...store.blockList, ...opts.blockList };[m
[32m+[m[32m  const limitRate = { ...store.limitRate, ...opts.limitRate };[m
[32m+[m[32m  if (blockHeadless && isHeadless(navigator)) {[m
[32m+[m[32m    return Promise.reject(headlessError());[m
[32m+[m[32m  }[m
[32m+[m[32m  const currentForm = findHTMLForm(form);[m
[32m+[m[32m  validateParams(publicKey, serviceID, templateID);[m
[32m+[m[32m  validateForm(currentForm);[m
[32m+[m[32m  const formData = new FormData(currentForm);[m
[32m+[m[32m  if (isBlockedValueInParams(blockList, formData)) {[m
[32m+[m[32m    return Promise.reject(blockedEmailError());[m
[32m+[m[32m  }[m
[32m+[m[32m  if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {[m
[32m+[m[32m    return Promise.reject(limitRateError());[m
[32m+[m[32m  }[m
[32m+[m[32m  formData.append("lib_version", "4.4.1");[m
[32m+[m[32m  formData.append("service_id", serviceID);[m
[32m+[m[32m  formData.append("template_id", templateID);[m
[32m+[m[32m  formData.append("user_id", publicKey);[m
[32m+[m[32m  return sendPost("/api/v1.0/email/send-form", formData);[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// node_modules/@emailjs/browser/es/index.js[m
[32m+[m[32mvar es_default = {[m
[32m+[m[32m  init,[m
[32m+[m[32m  send,[m
[32m+[m[32m  sendForm,[m
[32m+[m[32m  EmailJSResponseStatus[m
[32m+[m[32m};[m
[32m+[m[32mexport {[m
[32m+[m[32m  EmailJSResponseStatus,[m
[32m+[m[32m  es_default as default,[m
[32m+[m[32m  init,[m
[32m+[m[32m  send,[m
[32m+[m[32m  sendForm[m
[32m+[m[32m};[m
[32m+[m[32m//# sourceMappingURL=@emailjs_browser.js.map[m
[1mdiff --git a/node_modules/.vite/deps/@emailjs_browser.js.map b/node_modules/.vite/deps/@emailjs_browser.js.map[m
[1mnew file mode 100644[m
[1mindex 0000000..19bdf0f[m
[1m--- /dev/null[m
[1m+++ b/node_modules/.vite/deps/@emailjs_browser.js.map[m
[36m@@ -0,0 +1,7 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "version": 3,[m
[32m+[m[32m  "sources": ["../../@emailjs/browser/es/models/EmailJSResponseStatus.js", "../../@emailjs/browser/es/utils/createWebStorage/createWebStorage.js", "../../@emailjs/browser/es/store/store.js", "../../@emailjs/browser/es/utils/buildOptions/buildOptions.js", "../../@emailjs/browser/es/methods/init/init.js", "../../@emailjs/browser/es/api/sendPost.js", "../../@emailjs/browser/es/utils/validateParams/validateParams.js", "../../@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js", "../../@emailjs/browser/es/utils/isHeadless/isHeadless.js", "../../@emailjs/browser/es/errors/headlessError/headlessError.js", "../../@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js", "../../@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js", "../../@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js", "../../@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js", "../../@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js", "../../@emailjs/browser/es/errors/limitRateError/limitRateError.js", "../../@emailjs/browser/es/methods/send/send.js", "../../@emailjs/browser/es/utils/validateForm/validateForm.js", "../../@emailjs/browser/es/methods/sendForm/sendForm.js", "../../@emailjs/browser/es/index.js"],[m
[32m+[m[32m  "sourcesContent": ["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n", "export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n", "import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n", "export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n", "import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n", "import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n", "export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n", "export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n", "export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n", "export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n", "import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n", "export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n", "import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n", "import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n", "export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n", "import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.appen