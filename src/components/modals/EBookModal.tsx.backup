import { useState, useCallback } from 'react'
import { Document, Page, pdfjs } from 'react-pdf'
import type { PDFDocumentProxy } from 'pdfjs-dist'

// Set up PDF.js worker
pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  'pdfjs-dist/build/pdf.worker.min.js',
  import.meta.url,
).toString()

interface EBookModalProps {
  isOpen: boolean
  onClose: () => void
}

const EBookModal = ({ isOpen, onClose }: EBookModalProps) => {
  const [numPages, setNumPages] = useState<number>(0)
  const [pageNumber, setPageNumber] = useState<number>(1)
  const [scale, setScale] = useState<number>(1.0)
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)
  const [searchText, setSearchText] = useState<string>('')
  const [isSearchVisible, setIsSearchVisible] = useState<boolean>(false)

  // PDF file path - place your PDF in the public folder
  const pdfFile = '/fishing-ebook.pdf' // Replace with your PDF filename

  const onDocumentLoadSuccess = useCallback(({ numPages }: { numPages: number }) => {
    setNumPages(numPages)
    setLoading(false)
    setError(null)
  }, [])

  const onDocumentLoadError = useCallback((error: Error) => {
    setError('Failed to load PDF. Please check if the file exists.')
    setLoading(false)
    console.error('PDF load error:', error)
  }, [])

  const goToPrevPage = () => {
    setPageNumber(prev => Math.max(1, prev - 1))
  }

  const goToNextPage = () => {
    setPageNumber(prev => Math.min(numPages, prev + 1))
  }

  const goToPage = (page: number) => {
    if (page >= 1 && page <= numPages) {
      setPageNumber(page)
    }
  }

  const zoomIn = () => {
    setScale(prev => Math.min(3.0, prev + 0.2))
  }

  const zoomOut = () => {
    setScale(prev => Math.max(0.5, prev - 0.2))
  }

  const resetZoom = () => {
    setScale(1.0)
  }

  // Quick jump to specific sections (you can customize these)
  const bookmarks = [
    { name: 'Introduction', page: 1 },
    { name: 'Fish Species', page: 10 },
    { name: 'Fishing Techniques', page: 25 },
    { name: 'Equipment Guide', page: 45 },
    { name: 'Best Locations', page: 65 },
    { name: 'Tips & Tricks', page: 85 },
  ]

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center modal-overlay">
      <div className="relative w-full h-full max-w-6xl mx-4">
        <div className="modal-content rounded-2xl h-full flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-600">
            <div className="flex items-center gap-4">
              <h2 className="text-xl font-bold text-white">üìö Fishing E-book</h2>
              {!loading && !error && (
                <div className="text-sm text-gray-300">
                  Page {pageNumber} of {numPages}
                </div>
              )}
            </div>
            
            <div className="flex items-center gap-2">
              {/* Search Toggle */}
              <button
                onClick={() => setIsSearchVisible(!isSearchVisible)}
                className="p-2 text-gray-400 hover:text-white transition-colors"
                title="Search"
              >
                üîç
              </button>
              
              {/* Bookmarks Toggle */}
              <div className="relative group">
                <button className="p-2 text-gray-400 hover:text-white transition-colors" title="Bookmarks">
                  üìñ
                </button>
                
                {/* Bookmarks Dropdown */}
                <div className="absolute right-0 top-full mt-2 bg-gray-800 rounded-lg border border-gray-600 shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10 min-w-48">
                  <div className="p-2">
                    <div className="text-white text-sm font-semibold mb-2">Quick Navigation</div>
                    {bookmarks.map((bookmark, index) => (
                      <button
                        key={index}
                        onClick={() => goToPage(bookmark.page)}
                        className="w-full text-left px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded transition-colors"
                      >
                        {bookmark.name} - p.{bookmark.page}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
              
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-white transition-colors p-2"
                aria-label="Close modal"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>

          {/* Search Bar */}
          {isSearchVisible && (
            <div className="p-4 border-b border-gray-600">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={searchText}
                  onChange={(e) => setSearchText(e.target.value)}
                  placeholder="Search in PDF..."
                  className="flex-1 px-3 py-2 bg-gray-700 text-white rounded border border-gray-600 focus:border-blue-500 focus:outline-none text-sm"
                />
                <button
                  onClick={() => {/* Implement search functionality */}}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors text-sm"
                >
                  Search
                </button>
              </div>
            </div>
          )}

          {/* PDF Viewer */}
          <div className="flex-1 flex">
            {/* PDF Content */}
            <div className="flex-1 overflow-auto bg-gray-100 flex items-center justify-center">
              {loading && (
                <div className="text-center">
                  <div className="text-gray-600 text-lg mb-2">Loading PDF...</div>
                  <div className="text-gray-500 text-sm">Please wait while the e-book loads</div>
                </div>
              )}

              {error && (
                <div className="text-center p-8">
                  <div className="text-red-600 text-lg mb-4">üìö E-book Not Found</div>
                  <div className="text-gray-600 mb-4">{error}</div>
                  <div className="text-sm text-gray-500 max-w-md">
                    <p className="mb-2"><strong>To add your PDF e-book:</strong></p>
                    <ol className="text-left space-y-1">
                      <li>1. Place your PDF file in the <code className="bg-gray-200 px-1 rounded">public/</code> folder</li>
                      <li>2. Name it <code className="bg-gray-200 px-1 rounded">fishing-ebook.pdf</code></li>
                      <li>3. Refresh the page</li>
                    </ol>
                  </div>
                </div>
              )}

              {!loading && !error && (
                <Document
                  file={pdfFile}
                  onLoadSuccess={onDocumentLoadSuccess}
                  onLoadError={onDocumentLoadError}
                  loading={<div className="text-gray-600">Loading page...</div>}
                >
                  <Page
                    pageNumber={pageNumber}
                    scale={scale}
                    loading={<div className="text-gray-600">Rendering page...</div>}
                  />
                </Document>
              )}
            </div>
          </div>

          {/* Controls */}
          <div className="p-4 border-t border-gray-600 bg-gray-800">
            <div className="flex items-center justify-between">
              {/* Navigation Controls */}
              <div className="flex items-center gap-2">
                <button
                  onClick={goToPrevPage}
                  disabled={pageNumber <= 1}
                  className="px-3 py-2 bg-gray-600 hover:bg-gray-700 disabled:bg-gray-700 disabled:opacity-50 text-white rounded transition-colors"
                  title="Previous page"
                >
                  ‚Üê Prev
                </button>
                
                <div className="flex items-center gap-2">
                  <input
                    type="number"
                    min={1}
                    max={numPages}
                    value={pageNumber}
                    onChange={(e) => goToPage(parseInt(e.target.value) || 1)}
                    className="w-16 px-2 py-1 bg-gray-700 text-white rounded border border-gray-600 text-center text-sm"
                  />
                  <span className="text-gray-300 text-sm">of {numPages}</span>
                </div>
                
                <button
                  onClick={goToNextPage}
                  disabled={pageNumber >= numPages}
                  className="px-3 py-2 bg-gray-600 hover:bg-gray-700 disabled:bg-gray-700 disabled:opacity-50 text-white rounded transition-colors"
                  title="Next page"
                >
                  Next ‚Üí
                </button>
              </div>

              {/* Zoom Controls */}
              <div className="flex items-center gap-2">
                <button
                  onClick={zoomOut}
                  className="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded transition-colors"
                  title="Zoom out"
                >
                  ‚àí
                </button>
                
                <button
                  onClick={resetZoom}
                  className="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded transition-colors text-sm"
                  title="Reset zoom"
                >
                  {Math.round(scale * 100)}%
                </button>
                
                <button
                  onClick={zoomIn}
                  className="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded transition-colors"
                  title="Zoom in"
                >
                  +
                </button>
              </div>

              {/* Close Button */}
              <button
                onClick={onClose}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default EBookModal
